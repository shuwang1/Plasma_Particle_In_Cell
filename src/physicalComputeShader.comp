#version 430 core

//Uniform block containing postions and masses of the attractor 
layout (binding = 2) buffer AttractorBuffer {
	vec4 attractors[]; // xyz = position, w = mass
};

// Process particles in blocks of 128
layout (local_size_x = 128, local_size_y = 1, local_size_z = 1) in;

layout (std430, binding = 0) buffer PositionBuffer {
	vec4 positions[];
};

layout (std430, binding = 1) buffer VelocityBuffer {
	vec4 velocities[];
};


// Delta time
uniform float dt;

void main(void)
{
  uint idx = gl_GlobalInvocationID.x;

  // Read the current position and velocity from the buffers
  vec4 vel = velocities[idx], pos = positions[idx];
  
  // Update position.xyz using current velocity * time
  // Update position.life of a particle in w component
  pos += vec4(vel.xyz * dt, -0.0001*dt);

  // Calculate force and update velocity accordingly
  vec3 masscenter = vec3(0);
  for(int ii=0; ii<4; ii++) 
  {
    masscenter += attractors[ii].xyz * attractors[ii].w;
///    vec3 dir = attractors[ii].xyz - pos.xyz;
///    vel.xyz += dt * dt * attractors[ii].w * normalize( dir ) / ( dot( dir, dir ) + 10.0 );
  }

  vec3 dir = masscenter - pos.xyz;
  vel.xyz += dt*dt* normalize( dir ) / ( dot( dir, dir ) + 10.0 );

  // If the particle expires, reset it
  if ( pos.w <= 0 ) 
  {
    pos = vec4(-pos.xyz * 0.01, 1.0f);
    vel.xyz *= 0.01f;
  }

  // Store the new position and velocity back into the buffers
  positions[idx] = pos;	
  velocities[idx] = vel;
}
